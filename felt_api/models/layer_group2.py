# coding: utf-8

"""
    Felt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from felt_api.models.layer2 import Layer2
from felt_api.models.layer_group2_links import LayerGroup2Links
from typing import Optional, Set
from typing_extensions import Self

class LayerGroup2(BaseModel):
    """
    LayerGroup2
    """ # noqa: E501
    caption: Optional[StrictStr]
    id: StrictStr
    layers: List[Layer2]
    links: Optional[LayerGroup2Links] = None
    name: StrictStr
    ordering_key: Optional[StrictInt] = Field(default=None, description="A sort order key used for ordering layers and layer groups in the legend")
    subtitle: Optional[StrictStr] = Field(default=None, description="Deprecated: use `caption` instead.")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["caption", "id", "layers", "links", "name", "ordering_key", "subtitle", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['layer_group']):
            raise ValueError("must be one of enum values ('layer_group')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LayerGroup2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in layers (list)
        _items = []
        if self.layers:
            for _item_layers in self.layers:
                if _item_layers:
                    _items.append(_item_layers.to_dict())
            _dict['layers'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # set to None if caption (nullable) is None
        # and model_fields_set contains the field
        if self.caption is None and "caption" in self.model_fields_set:
            _dict['caption'] = None

        # set to None if subtitle (nullable) is None
        # and model_fields_set contains the field
        if self.subtitle is None and "subtitle" in self.model_fields_set:
            _dict['subtitle'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LayerGroup2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caption": obj.get("caption"),
            "id": obj.get("id"),
            "layers": [Layer2.from_dict(_item) for _item in obj["layers"]] if obj.get("layers") is not None else None,
            "links": LayerGroup2Links.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "name": obj.get("name"),
            "ordering_key": obj.get("ordering_key"),
            "subtitle": obj.get("subtitle"),
            "type": obj.get("type")
        })
        return _obj


