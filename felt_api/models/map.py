# coding: utf-8

"""
    Felt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from felt_api.models.geo_json import GeoJSON
from felt_api.models.layer1 import Layer1
from felt_api.models.layer_group1 import LayerGroup1
from felt_api.models.map_element_groups_inner import MapElementGroupsInner
from felt_api.models.map_links import MapLinks
from typing import Optional, Set
from typing_extensions import Self

class Map(BaseModel):
    """
    Map
    """ # noqa: E501
    created_at: StrictStr
    element_groups: List[MapElementGroupsInner]
    elements: GeoJSON
    folder_id: Optional[StrictStr] = None
    id: StrictStr
    layer_groups: List[LayerGroup1]
    layers: List[Layer1]
    links: Optional[MapLinks] = None
    project_id: StrictStr
    public_access: StrictStr
    thumbnail_url: Optional[StrictStr] = Field(description="A static thumbnail image of the map")
    title: StrictStr
    type: StrictStr
    url: StrictStr
    visited_at: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["created_at", "element_groups", "elements", "folder_id", "id", "layer_groups", "layers", "links", "project_id", "public_access", "thumbnail_url", "title", "type", "url", "visited_at"]

    @field_validator('public_access')
    def public_access_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['private', 'view_only', 'view_and_comment', 'view_comment_and_edit']):
            raise ValueError("must be one of enum values ('private', 'view_only', 'view_and_comment', 'view_comment_and_edit')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['map']):
            raise ValueError("must be one of enum values ('map')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Map from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in element_groups (list)
        _items = []
        if self.element_groups:
            for _item_element_groups in self.element_groups:
                if _item_element_groups:
                    _items.append(_item_element_groups.to_dict())
            _dict['element_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of elements
        if self.elements:
            _dict['elements'] = self.elements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in layer_groups (list)
        _items = []
        if self.layer_groups:
            for _item_layer_groups in self.layer_groups:
                if _item_layer_groups:
                    _items.append(_item_layer_groups.to_dict())
            _dict['layer_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in layers (list)
        _items = []
        if self.layers:
            for _item_layers in self.layers:
                if _item_layers:
                    _items.append(_item_layers.to_dict())
            _dict['layers'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # set to None if folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.folder_id is None and "folder_id" in self.model_fields_set:
            _dict['folder_id'] = None

        # set to None if thumbnail_url (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail_url is None and "thumbnail_url" in self.model_fields_set:
            _dict['thumbnail_url'] = None

        # set to None if visited_at (nullable) is None
        # and model_fields_set contains the field
        if self.visited_at is None and "visited_at" in self.model_fields_set:
            _dict['visited_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Map from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "element_groups": [MapElementGroupsInner.from_dict(_item) for _item in obj["element_groups"]] if obj.get("element_groups") is not None else None,
            "elements": GeoJSON.from_dict(obj["elements"]) if obj.get("elements") is not None else None,
            "folder_id": obj.get("folder_id"),
            "id": obj.get("id"),
            "layer_groups": [LayerGroup1.from_dict(_item) for _item in obj["layer_groups"]] if obj.get("layer_groups") is not None else None,
            "layers": [Layer1.from_dict(_item) for _item in obj["layers"]] if obj.get("layers") is not None else None,
            "links": MapLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "project_id": obj.get("project_id"),
            "public_access": obj.get("public_access"),
            "thumbnail_url": obj.get("thumbnail_url"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "visited_at": obj.get("visited_at")
        })
        return _obj


