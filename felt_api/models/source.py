# coding: utf-8

"""
    Felt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from felt_api.models.source_connection import SourceConnection
from felt_api.models.source_dataset import SourceDataset
from felt_api.models.source_permissions import SourcePermissions
from typing import Optional, Set
from typing_extensions import Self

class Source(BaseModel):
    """
    Source
    """ # noqa: E501
    automatic_sync: Optional[StrictStr] = None
    connection: Optional[SourceConnection] = None
    created_at: Optional[StrictInt] = None
    datasets: Optional[List[SourceDataset]] = None
    id: Optional[StrictStr] = None
    last_synced_at: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = None
    permissions: Optional[SourcePermissions] = None
    sync_status: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    updated_at: Optional[StrictInt] = None
    workspace_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["automatic_sync", "connection", "created_at", "datasets", "id", "last_synced_at", "name", "owner_id", "permissions", "sync_status", "type", "updated_at", "workspace_id"]

    @field_validator('automatic_sync')
    def automatic_sync_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'paused']):
            raise ValueError("must be one of enum values ('enabled', 'paused')")
        return value

    @field_validator('sync_status')
    def sync_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['syncing', 'completed', 'failed']):
            raise ValueError("must be one of enum values ('syncing', 'completed', 'failed')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['source']):
            raise ValueError("must be one of enum values ('source')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Source from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connection
        if self.connection:
            _dict['connection'] = self.connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict['datasets'] = _items
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # set to None if connection (nullable) is None
        # and model_fields_set contains the field
        if self.connection is None and "connection" in self.model_fields_set:
            _dict['connection'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if last_synced_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_synced_at is None and "last_synced_at" in self.model_fields_set:
            _dict['last_synced_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Source from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automatic_sync": obj.get("automatic_sync"),
            "connection": SourceConnection.from_dict(obj["connection"]) if obj.get("connection") is not None else None,
            "created_at": obj.get("created_at"),
            "datasets": [SourceDataset.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "id": obj.get("id"),
            "last_synced_at": obj.get("last_synced_at"),
            "name": obj.get("name"),
            "owner_id": obj.get("owner_id"),
            "permissions": SourcePermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "sync_status": obj.get("sync_status"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "workspace_id": obj.get("workspace_id")
        })
        return _obj


