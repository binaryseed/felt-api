# coding: utf-8

"""
    Felt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from felt_api.models.amazon_redshift_connection import AmazonRedshiftConnection
from felt_api.models.databricks_connection import DatabricksConnection
from felt_api.models.esri_feature_server_connection import ESRIFeatureServerConnection
from felt_api.models.google_big_query_connection import GoogleBigQueryConnection
from felt_api.models.microsoft_sql_connection import MicrosoftSQLConnection
from felt_api.models.ogc_connection import OGCConnection
from felt_api.models.postgres_connection import PostgresConnection
from felt_api.models.sentinel_hub_connection import SentinelHubConnection
from felt_api.models.snowflake_connection import SnowflakeConnection
from felt_api.models.stac_connection import STACConnection
from felt_api.models.wfs_connection import WFSConnection
from felt_api.models.wmswmts_connection import WMSWMTSConnection
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SOURCECONNECTION_ONE_OF_SCHEMAS = ["AmazonRedshiftConnection", "DatabricksConnection", "ESRIFeatureServerConnection", "GoogleBigQueryConnection", "MicrosoftSQLConnection", "OGCConnection", "PostgresConnection", "STACConnection", "SentinelHubConnection", "SnowflakeConnection", "WFSConnection", "WMSWMTSConnection"]

class SourceConnection(BaseModel):
    """
    SourceConnection
    """
    # data type: SnowflakeConnection
    oneof_schema_1_validator: Optional[SnowflakeConnection] = None
    # data type: PostgresConnection
    oneof_schema_2_validator: Optional[PostgresConnection] = None
    # data type: GoogleBigQueryConnection
    oneof_schema_3_validator: Optional[GoogleBigQueryConnection] = None
    # data type: DatabricksConnection
    oneof_schema_4_validator: Optional[DatabricksConnection] = None
    # data type: ESRIFeatureServerConnection
    oneof_schema_5_validator: Optional[ESRIFeatureServerConnection] = None
    # data type: MicrosoftSQLConnection
    oneof_schema_6_validator: Optional[MicrosoftSQLConnection] = None
    # data type: OGCConnection
    oneof_schema_7_validator: Optional[OGCConnection] = None
    # data type: AmazonRedshiftConnection
    oneof_schema_8_validator: Optional[AmazonRedshiftConnection] = None
    # data type: SentinelHubConnection
    oneof_schema_9_validator: Optional[SentinelHubConnection] = None
    # data type: STACConnection
    oneof_schema_10_validator: Optional[STACConnection] = None
    # data type: WFSConnection
    oneof_schema_11_validator: Optional[WFSConnection] = None
    # data type: WMSWMTSConnection
    oneof_schema_12_validator: Optional[WMSWMTSConnection] = None
    actual_instance: Optional[Union[AmazonRedshiftConnection, DatabricksConnection, ESRIFeatureServerConnection, GoogleBigQueryConnection, MicrosoftSQLConnection, OGCConnection, PostgresConnection, STACConnection, SentinelHubConnection, SnowflakeConnection, WFSConnection, WMSWMTSConnection]] = None
    one_of_schemas: Set[str] = { "AmazonRedshiftConnection", "DatabricksConnection", "ESRIFeatureServerConnection", "GoogleBigQueryConnection", "MicrosoftSQLConnection", "OGCConnection", "PostgresConnection", "STACConnection", "SentinelHubConnection", "SnowflakeConnection", "WFSConnection", "WMSWMTSConnection" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        if v is None:
            return v

        instance = SourceConnection.model_construct()
        error_messages = []
        match = 0
        # validate data type: SnowflakeConnection
        if not isinstance(v, SnowflakeConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnowflakeConnection`")
        else:
            match += 1
        # validate data type: PostgresConnection
        if not isinstance(v, PostgresConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PostgresConnection`")
        else:
            match += 1
        # validate data type: GoogleBigQueryConnection
        if not isinstance(v, GoogleBigQueryConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleBigQueryConnection`")
        else:
            match += 1
        # validate data type: DatabricksConnection
        if not isinstance(v, DatabricksConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatabricksConnection`")
        else:
            match += 1
        # validate data type: ESRIFeatureServerConnection
        if not isinstance(v, ESRIFeatureServerConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ESRIFeatureServerConnection`")
        else:
            match += 1
        # validate data type: MicrosoftSQLConnection
        if not isinstance(v, MicrosoftSQLConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MicrosoftSQLConnection`")
        else:
            match += 1
        # validate data type: OGCConnection
        if not isinstance(v, OGCConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OGCConnection`")
        else:
            match += 1
        # validate data type: AmazonRedshiftConnection
        if not isinstance(v, AmazonRedshiftConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AmazonRedshiftConnection`")
        else:
            match += 1
        # validate data type: SentinelHubConnection
        if not isinstance(v, SentinelHubConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SentinelHubConnection`")
        else:
            match += 1
        # validate data type: STACConnection
        if not isinstance(v, STACConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `STACConnection`")
        else:
            match += 1
        # validate data type: WFSConnection
        if not isinstance(v, WFSConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WFSConnection`")
        else:
            match += 1
        # validate data type: WMSWMTSConnection
        if not isinstance(v, WMSWMTSConnection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WMSWMTSConnection`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SourceConnection with oneOf schemas: AmazonRedshiftConnection, DatabricksConnection, ESRIFeatureServerConnection, GoogleBigQueryConnection, MicrosoftSQLConnection, OGCConnection, PostgresConnection, STACConnection, SentinelHubConnection, SnowflakeConnection, WFSConnection, WMSWMTSConnection. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SourceConnection with oneOf schemas: AmazonRedshiftConnection, DatabricksConnection, ESRIFeatureServerConnection, GoogleBigQueryConnection, MicrosoftSQLConnection, OGCConnection, PostgresConnection, STACConnection, SentinelHubConnection, SnowflakeConnection, WFSConnection, WMSWMTSConnection. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: Optional[str]) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        if json_str is None:
            return instance

        error_messages = []
        match = 0

        # deserialize data into SnowflakeConnection
        try:
            instance.actual_instance = SnowflakeConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PostgresConnection
        try:
            instance.actual_instance = PostgresConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleBigQueryConnection
        try:
            instance.actual_instance = GoogleBigQueryConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatabricksConnection
        try:
            instance.actual_instance = DatabricksConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ESRIFeatureServerConnection
        try:
            instance.actual_instance = ESRIFeatureServerConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MicrosoftSQLConnection
        try:
            instance.actual_instance = MicrosoftSQLConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OGCConnection
        try:
            instance.actual_instance = OGCConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AmazonRedshiftConnection
        try:
            instance.actual_instance = AmazonRedshiftConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SentinelHubConnection
        try:
            instance.actual_instance = SentinelHubConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into STACConnection
        try:
            instance.actual_instance = STACConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WFSConnection
        try:
            instance.actual_instance = WFSConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WMSWMTSConnection
        try:
            instance.actual_instance = WMSWMTSConnection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SourceConnection with oneOf schemas: AmazonRedshiftConnection, DatabricksConnection, ESRIFeatureServerConnection, GoogleBigQueryConnection, MicrosoftSQLConnection, OGCConnection, PostgresConnection, STACConnection, SentinelHubConnection, SnowflakeConnection, WFSConnection, WMSWMTSConnection. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SourceConnection with oneOf schemas: AmazonRedshiftConnection, DatabricksConnection, ESRIFeatureServerConnection, GoogleBigQueryConnection, MicrosoftSQLConnection, OGCConnection, PostgresConnection, STACConnection, SentinelHubConnection, SnowflakeConnection, WFSConnection, WMSWMTSConnection. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AmazonRedshiftConnection, DatabricksConnection, ESRIFeatureServerConnection, GoogleBigQueryConnection, MicrosoftSQLConnection, OGCConnection, PostgresConnection, STACConnection, SentinelHubConnection, SnowflakeConnection, WFSConnection, WMSWMTSConnection]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


