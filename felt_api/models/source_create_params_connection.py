# coding: utf-8

"""
    Felt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from felt_api.models.amazon_redshift_connection_create_params import AmazonRedshiftConnectionCreateParams
from felt_api.models.databricks_connection_create_params import DatabricksConnectionCreateParams
from felt_api.models.esri_feature_server_connection_create_params import ESRIFeatureServerConnectionCreateParams
from felt_api.models.google_big_query_connection_create_params import GoogleBigQueryConnectionCreateParams
from felt_api.models.microsoft_sql_connection_create_params import MicrosoftSQLConnectionCreateParams
from felt_api.models.ogc_connection_create_params import OGCConnectionCreateParams
from felt_api.models.postgres_connection_create_params import PostgresConnectionCreateParams
from felt_api.models.snowflake_connection_create_params import SnowflakeConnectionCreateParams
from felt_api.models.stac_connection_create_params import STACConnectionCreateParams
from felt_api.models.wfs_connection_params import WFSConnectionParams
from felt_api.models.wmswmts_connection_create_params import WMSWMTSConnectionCreateParams
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SOURCECREATEPARAMSCONNECTION_ONE_OF_SCHEMAS = ["AmazonRedshiftConnectionCreateParams", "DatabricksConnectionCreateParams", "ESRIFeatureServerConnectionCreateParams", "GoogleBigQueryConnectionCreateParams", "MicrosoftSQLConnectionCreateParams", "OGCConnectionCreateParams", "PostgresConnectionCreateParams", "STACConnectionCreateParams", "SnowflakeConnectionCreateParams", "WFSConnectionParams", "WMSWMTSConnectionCreateParams"]

class SourceCreateParamsConnection(BaseModel):
    """
    SourceCreateParamsConnection
    """
    # data type: SnowflakeConnectionCreateParams
    oneof_schema_1_validator: Optional[SnowflakeConnectionCreateParams] = None
    # data type: PostgresConnectionCreateParams
    oneof_schema_2_validator: Optional[PostgresConnectionCreateParams] = None
    # data type: GoogleBigQueryConnectionCreateParams
    oneof_schema_3_validator: Optional[GoogleBigQueryConnectionCreateParams] = None
    # data type: DatabricksConnectionCreateParams
    oneof_schema_4_validator: Optional[DatabricksConnectionCreateParams] = None
    # data type: ESRIFeatureServerConnectionCreateParams
    oneof_schema_5_validator: Optional[ESRIFeatureServerConnectionCreateParams] = None
    # data type: MicrosoftSQLConnectionCreateParams
    oneof_schema_6_validator: Optional[MicrosoftSQLConnectionCreateParams] = None
    # data type: OGCConnectionCreateParams
    oneof_schema_7_validator: Optional[OGCConnectionCreateParams] = None
    # data type: AmazonRedshiftConnectionCreateParams
    oneof_schema_8_validator: Optional[AmazonRedshiftConnectionCreateParams] = None
    # data type: STACConnectionCreateParams
    oneof_schema_9_validator: Optional[STACConnectionCreateParams] = None
    # data type: WFSConnectionParams
    oneof_schema_10_validator: Optional[WFSConnectionParams] = None
    # data type: WMSWMTSConnectionCreateParams
    oneof_schema_11_validator: Optional[WMSWMTSConnectionCreateParams] = None
    actual_instance: Optional[Union[AmazonRedshiftConnectionCreateParams, DatabricksConnectionCreateParams, ESRIFeatureServerConnectionCreateParams, GoogleBigQueryConnectionCreateParams, MicrosoftSQLConnectionCreateParams, OGCConnectionCreateParams, PostgresConnectionCreateParams, STACConnectionCreateParams, SnowflakeConnectionCreateParams, WFSConnectionParams, WMSWMTSConnectionCreateParams]] = None
    one_of_schemas: Set[str] = { "AmazonRedshiftConnectionCreateParams", "DatabricksConnectionCreateParams", "ESRIFeatureServerConnectionCreateParams", "GoogleBigQueryConnectionCreateParams", "MicrosoftSQLConnectionCreateParams", "OGCConnectionCreateParams", "PostgresConnectionCreateParams", "STACConnectionCreateParams", "SnowflakeConnectionCreateParams", "WFSConnectionParams", "WMSWMTSConnectionCreateParams" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SourceCreateParamsConnection.model_construct()
        error_messages = []
        match = 0
        # validate data type: SnowflakeConnectionCreateParams
        if not isinstance(v, SnowflakeConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnowflakeConnectionCreateParams`")
        else:
            match += 1
        # validate data type: PostgresConnectionCreateParams
        if not isinstance(v, PostgresConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PostgresConnectionCreateParams`")
        else:
            match += 1
        # validate data type: GoogleBigQueryConnectionCreateParams
        if not isinstance(v, GoogleBigQueryConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleBigQueryConnectionCreateParams`")
        else:
            match += 1
        # validate data type: DatabricksConnectionCreateParams
        if not isinstance(v, DatabricksConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatabricksConnectionCreateParams`")
        else:
            match += 1
        # validate data type: ESRIFeatureServerConnectionCreateParams
        if not isinstance(v, ESRIFeatureServerConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ESRIFeatureServerConnectionCreateParams`")
        else:
            match += 1
        # validate data type: MicrosoftSQLConnectionCreateParams
        if not isinstance(v, MicrosoftSQLConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MicrosoftSQLConnectionCreateParams`")
        else:
            match += 1
        # validate data type: OGCConnectionCreateParams
        if not isinstance(v, OGCConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OGCConnectionCreateParams`")
        else:
            match += 1
        # validate data type: AmazonRedshiftConnectionCreateParams
        if not isinstance(v, AmazonRedshiftConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AmazonRedshiftConnectionCreateParams`")
        else:
            match += 1
        # validate data type: STACConnectionCreateParams
        if not isinstance(v, STACConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `STACConnectionCreateParams`")
        else:
            match += 1
        # validate data type: WFSConnectionParams
        if not isinstance(v, WFSConnectionParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WFSConnectionParams`")
        else:
            match += 1
        # validate data type: WMSWMTSConnectionCreateParams
        if not isinstance(v, WMSWMTSConnectionCreateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WMSWMTSConnectionCreateParams`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SourceCreateParamsConnection with oneOf schemas: AmazonRedshiftConnectionCreateParams, DatabricksConnectionCreateParams, ESRIFeatureServerConnectionCreateParams, GoogleBigQueryConnectionCreateParams, MicrosoftSQLConnectionCreateParams, OGCConnectionCreateParams, PostgresConnectionCreateParams, STACConnectionCreateParams, SnowflakeConnectionCreateParams, WFSConnectionParams, WMSWMTSConnectionCreateParams. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SourceCreateParamsConnection with oneOf schemas: AmazonRedshiftConnectionCreateParams, DatabricksConnectionCreateParams, ESRIFeatureServerConnectionCreateParams, GoogleBigQueryConnectionCreateParams, MicrosoftSQLConnectionCreateParams, OGCConnectionCreateParams, PostgresConnectionCreateParams, STACConnectionCreateParams, SnowflakeConnectionCreateParams, WFSConnectionParams, WMSWMTSConnectionCreateParams. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SnowflakeConnectionCreateParams
        try:
            instance.actual_instance = SnowflakeConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PostgresConnectionCreateParams
        try:
            instance.actual_instance = PostgresConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleBigQueryConnectionCreateParams
        try:
            instance.actual_instance = GoogleBigQueryConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatabricksConnectionCreateParams
        try:
            instance.actual_instance = DatabricksConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ESRIFeatureServerConnectionCreateParams
        try:
            instance.actual_instance = ESRIFeatureServerConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MicrosoftSQLConnectionCreateParams
        try:
            instance.actual_instance = MicrosoftSQLConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OGCConnectionCreateParams
        try:
            instance.actual_instance = OGCConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AmazonRedshiftConnectionCreateParams
        try:
            instance.actual_instance = AmazonRedshiftConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into STACConnectionCreateParams
        try:
            instance.actual_instance = STACConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WFSConnectionParams
        try:
            instance.actual_instance = WFSConnectionParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WMSWMTSConnectionCreateParams
        try:
            instance.actual_instance = WMSWMTSConnectionCreateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SourceCreateParamsConnection with oneOf schemas: AmazonRedshiftConnectionCreateParams, DatabricksConnectionCreateParams, ESRIFeatureServerConnectionCreateParams, GoogleBigQueryConnectionCreateParams, MicrosoftSQLConnectionCreateParams, OGCConnectionCreateParams, PostgresConnectionCreateParams, STACConnectionCreateParams, SnowflakeConnectionCreateParams, WFSConnectionParams, WMSWMTSConnectionCreateParams. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SourceCreateParamsConnection with oneOf schemas: AmazonRedshiftConnectionCreateParams, DatabricksConnectionCreateParams, ESRIFeatureServerConnectionCreateParams, GoogleBigQueryConnectionCreateParams, MicrosoftSQLConnectionCreateParams, OGCConnectionCreateParams, PostgresConnectionCreateParams, STACConnectionCreateParams, SnowflakeConnectionCreateParams, WFSConnectionParams, WMSWMTSConnectionCreateParams. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AmazonRedshiftConnectionCreateParams, DatabricksConnectionCreateParams, ESRIFeatureServerConnectionCreateParams, GoogleBigQueryConnectionCreateParams, MicrosoftSQLConnectionCreateParams, OGCConnectionCreateParams, PostgresConnectionCreateParams, STACConnectionCreateParams, SnowflakeConnectionCreateParams, WFSConnectionParams, WMSWMTSConnectionCreateParams]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


