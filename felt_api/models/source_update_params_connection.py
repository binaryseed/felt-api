# coding: utf-8

"""
    Felt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from felt_api.models.amazon_redshift_connection_update_params import AmazonRedshiftConnectionUpdateParams
from felt_api.models.databricks_connection_update_params import DatabricksConnectionUpdateParams
from felt_api.models.esri_feature_server_connection_update_params import ESRIFeatureServerConnectionUpdateParams
from felt_api.models.google_big_query_connection_update_params import GoogleBigQueryConnectionUpdateParams
from felt_api.models.microsoft_sql_connection_update_params import MicrosoftSQLConnectionUpdateParams
from felt_api.models.ogc_connection_update_params import OGCConnectionUpdateParams
from felt_api.models.postgres_connection_update_params import PostgresConnectionUpdateParams
from felt_api.models.snowflake_connection_update_params import SnowflakeConnectionUpdateParams
from felt_api.models.stac_connection_update_params import STACConnectionUpdateParams
from felt_api.models.wfs_connection_update_params import WFSConnectionUpdateParams
from felt_api.models.wmswmts_connection_update_params import WMSWMTSConnectionUpdateParams
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SOURCEUPDATEPARAMSCONNECTION_ONE_OF_SCHEMAS = ["AmazonRedshiftConnectionUpdateParams", "DatabricksConnectionUpdateParams", "ESRIFeatureServerConnectionUpdateParams", "GoogleBigQueryConnectionUpdateParams", "MicrosoftSQLConnectionUpdateParams", "OGCConnectionUpdateParams", "PostgresConnectionUpdateParams", "STACConnectionUpdateParams", "SnowflakeConnectionUpdateParams", "WFSConnectionUpdateParams", "WMSWMTSConnectionUpdateParams"]

class SourceUpdateParamsConnection(BaseModel):
    """
    SourceUpdateParamsConnection
    """
    # data type: SnowflakeConnectionUpdateParams
    oneof_schema_1_validator: Optional[SnowflakeConnectionUpdateParams] = None
    # data type: PostgresConnectionUpdateParams
    oneof_schema_2_validator: Optional[PostgresConnectionUpdateParams] = None
    # data type: GoogleBigQueryConnectionUpdateParams
    oneof_schema_3_validator: Optional[GoogleBigQueryConnectionUpdateParams] = None
    # data type: DatabricksConnectionUpdateParams
    oneof_schema_4_validator: Optional[DatabricksConnectionUpdateParams] = None
    # data type: ESRIFeatureServerConnectionUpdateParams
    oneof_schema_5_validator: Optional[ESRIFeatureServerConnectionUpdateParams] = None
    # data type: MicrosoftSQLConnectionUpdateParams
    oneof_schema_6_validator: Optional[MicrosoftSQLConnectionUpdateParams] = None
    # data type: OGCConnectionUpdateParams
    oneof_schema_7_validator: Optional[OGCConnectionUpdateParams] = None
    # data type: AmazonRedshiftConnectionUpdateParams
    oneof_schema_8_validator: Optional[AmazonRedshiftConnectionUpdateParams] = None
    # data type: STACConnectionUpdateParams
    oneof_schema_9_validator: Optional[STACConnectionUpdateParams] = None
    # data type: WFSConnectionUpdateParams
    oneof_schema_10_validator: Optional[WFSConnectionUpdateParams] = None
    # data type: WMSWMTSConnectionUpdateParams
    oneof_schema_11_validator: Optional[WMSWMTSConnectionUpdateParams] = None
    actual_instance: Optional[Union[AmazonRedshiftConnectionUpdateParams, DatabricksConnectionUpdateParams, ESRIFeatureServerConnectionUpdateParams, GoogleBigQueryConnectionUpdateParams, MicrosoftSQLConnectionUpdateParams, OGCConnectionUpdateParams, PostgresConnectionUpdateParams, STACConnectionUpdateParams, SnowflakeConnectionUpdateParams, WFSConnectionUpdateParams, WMSWMTSConnectionUpdateParams]] = None
    one_of_schemas: Set[str] = { "AmazonRedshiftConnectionUpdateParams", "DatabricksConnectionUpdateParams", "ESRIFeatureServerConnectionUpdateParams", "GoogleBigQueryConnectionUpdateParams", "MicrosoftSQLConnectionUpdateParams", "OGCConnectionUpdateParams", "PostgresConnectionUpdateParams", "STACConnectionUpdateParams", "SnowflakeConnectionUpdateParams", "WFSConnectionUpdateParams", "WMSWMTSConnectionUpdateParams" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SourceUpdateParamsConnection.model_construct()
        error_messages = []
        match = 0
        # validate data type: SnowflakeConnectionUpdateParams
        if not isinstance(v, SnowflakeConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnowflakeConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: PostgresConnectionUpdateParams
        if not isinstance(v, PostgresConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PostgresConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: GoogleBigQueryConnectionUpdateParams
        if not isinstance(v, GoogleBigQueryConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleBigQueryConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: DatabricksConnectionUpdateParams
        if not isinstance(v, DatabricksConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatabricksConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: ESRIFeatureServerConnectionUpdateParams
        if not isinstance(v, ESRIFeatureServerConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ESRIFeatureServerConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: MicrosoftSQLConnectionUpdateParams
        if not isinstance(v, MicrosoftSQLConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MicrosoftSQLConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: OGCConnectionUpdateParams
        if not isinstance(v, OGCConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OGCConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: AmazonRedshiftConnectionUpdateParams
        if not isinstance(v, AmazonRedshiftConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AmazonRedshiftConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: STACConnectionUpdateParams
        if not isinstance(v, STACConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `STACConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: WFSConnectionUpdateParams
        if not isinstance(v, WFSConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WFSConnectionUpdateParams`")
        else:
            match += 1
        # validate data type: WMSWMTSConnectionUpdateParams
        if not isinstance(v, WMSWMTSConnectionUpdateParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WMSWMTSConnectionUpdateParams`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SourceUpdateParamsConnection with oneOf schemas: AmazonRedshiftConnectionUpdateParams, DatabricksConnectionUpdateParams, ESRIFeatureServerConnectionUpdateParams, GoogleBigQueryConnectionUpdateParams, MicrosoftSQLConnectionUpdateParams, OGCConnectionUpdateParams, PostgresConnectionUpdateParams, STACConnectionUpdateParams, SnowflakeConnectionUpdateParams, WFSConnectionUpdateParams, WMSWMTSConnectionUpdateParams. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SourceUpdateParamsConnection with oneOf schemas: AmazonRedshiftConnectionUpdateParams, DatabricksConnectionUpdateParams, ESRIFeatureServerConnectionUpdateParams, GoogleBigQueryConnectionUpdateParams, MicrosoftSQLConnectionUpdateParams, OGCConnectionUpdateParams, PostgresConnectionUpdateParams, STACConnectionUpdateParams, SnowflakeConnectionUpdateParams, WFSConnectionUpdateParams, WMSWMTSConnectionUpdateParams. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SnowflakeConnectionUpdateParams
        try:
            instance.actual_instance = SnowflakeConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PostgresConnectionUpdateParams
        try:
            instance.actual_instance = PostgresConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleBigQueryConnectionUpdateParams
        try:
            instance.actual_instance = GoogleBigQueryConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatabricksConnectionUpdateParams
        try:
            instance.actual_instance = DatabricksConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ESRIFeatureServerConnectionUpdateParams
        try:
            instance.actual_instance = ESRIFeatureServerConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MicrosoftSQLConnectionUpdateParams
        try:
            instance.actual_instance = MicrosoftSQLConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OGCConnectionUpdateParams
        try:
            instance.actual_instance = OGCConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AmazonRedshiftConnectionUpdateParams
        try:
            instance.actual_instance = AmazonRedshiftConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into STACConnectionUpdateParams
        try:
            instance.actual_instance = STACConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WFSConnectionUpdateParams
        try:
            instance.actual_instance = WFSConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WMSWMTSConnectionUpdateParams
        try:
            instance.actual_instance = WMSWMTSConnectionUpdateParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SourceUpdateParamsConnection with oneOf schemas: AmazonRedshiftConnectionUpdateParams, DatabricksConnectionUpdateParams, ESRIFeatureServerConnectionUpdateParams, GoogleBigQueryConnectionUpdateParams, MicrosoftSQLConnectionUpdateParams, OGCConnectionUpdateParams, PostgresConnectionUpdateParams, STACConnectionUpdateParams, SnowflakeConnectionUpdateParams, WFSConnectionUpdateParams, WMSWMTSConnectionUpdateParams. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SourceUpdateParamsConnection with oneOf schemas: AmazonRedshiftConnectionUpdateParams, DatabricksConnectionUpdateParams, ESRIFeatureServerConnectionUpdateParams, GoogleBigQueryConnectionUpdateParams, MicrosoftSQLConnectionUpdateParams, OGCConnectionUpdateParams, PostgresConnectionUpdateParams, STACConnectionUpdateParams, SnowflakeConnectionUpdateParams, WFSConnectionUpdateParams, WMSWMTSConnectionUpdateParams. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AmazonRedshiftConnectionUpdateParams, DatabricksConnectionUpdateParams, ESRIFeatureServerConnectionUpdateParams, GoogleBigQueryConnectionUpdateParams, MicrosoftSQLConnectionUpdateParams, OGCConnectionUpdateParams, PostgresConnectionUpdateParams, STACConnectionUpdateParams, SnowflakeConnectionUpdateParams, WFSConnectionUpdateParams, WMSWMTSConnectionUpdateParams]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


