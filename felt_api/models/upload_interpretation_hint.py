# coding: utf-8

"""
    Felt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from felt_api.models.admin0_attribute_hint import Admin0AttributeHint
from felt_api.models.admin1_attribute_hint import Admin1AttributeHint
from felt_api.models.australian_abs_postal_area2021_attribute_hint import AustralianABSPostalArea2021AttributeHint
from felt_api.models.european_union_lau2021_attribute_hint import EuropeanUnionLAU2021AttributeHint
from felt_api.models.european_union_nuts12021_attribute_hint import EuropeanUnionNUTS12021AttributeHint
from felt_api.models.european_union_nuts22021_attribute_hint import EuropeanUnionNUTS22021AttributeHint
from felt_api.models.european_union_nuts32021_attribute_hint import EuropeanUnionNUTS32021AttributeHint
from felt_api.models.full_address_attribute_hint import FullAddressAttributeHint
from felt_api.models.h3_attribute_hint import H3AttributeHint
from felt_api.models.latitude_and_longitude_attribute_hint import LatitudeAndLongitudeAttributeHint
from felt_api.models.latitude_and_longitude_combined_attribute_hint import LatitudeAndLongitudeCombinedAttributeHint
from felt_api.models.locality_attribute_hint import LocalityAttributeHint
from felt_api.models.partial_address_attribute_hint import PartialAddressAttributeHint
from felt_api.models.timezone_attribute_hint import TimezoneAttributeHint
from felt_api.models.us_census_tract2020_attribute_hint import USCensusTract2020AttributeHint
from felt_api.models.us_county2020_attribute_hint import USCounty2020AttributeHint
from felt_api.models.us_state2020_attribute_hint import USState2020AttributeHint
from felt_api.models.us_zip_code2022_attribute_hint import USZipCode2022AttributeHint
from felt_api.models.uscbsa2020_attribute_hint import USCBSA2020AttributeHint
from felt_api.models.wktwkb_literal_attribute_hint import WKTWKBLiteralAttributeHint
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

UPLOADINTERPRETATIONHINT_ONE_OF_SCHEMAS = ["Admin0AttributeHint", "Admin1AttributeHint", "AustralianABSPostalArea2021AttributeHint", "EuropeanUnionLAU2021AttributeHint", "EuropeanUnionNUTS12021AttributeHint", "EuropeanUnionNUTS22021AttributeHint", "EuropeanUnionNUTS32021AttributeHint", "FullAddressAttributeHint", "H3AttributeHint", "LatitudeAndLongitudeAttributeHint", "LatitudeAndLongitudeCombinedAttributeHint", "LocalityAttributeHint", "PartialAddressAttributeHint", "TimezoneAttributeHint", "USCBSA2020AttributeHint", "USCensusTract2020AttributeHint", "USCounty2020AttributeHint", "USState2020AttributeHint", "USZipCode2022AttributeHint", "WKTWKBLiteralAttributeHint"]

class UploadInterpretationHint(BaseModel):
    """
    UploadInterpretationHint
    """
    # data type: LatitudeAndLongitudeAttributeHint
    oneof_schema_1_validator: Optional[LatitudeAndLongitudeAttributeHint] = None
    # data type: LatitudeAndLongitudeCombinedAttributeHint
    oneof_schema_2_validator: Optional[LatitudeAndLongitudeCombinedAttributeHint] = None
    # data type: FullAddressAttributeHint
    oneof_schema_3_validator: Optional[FullAddressAttributeHint] = None
    # data type: PartialAddressAttributeHint
    oneof_schema_4_validator: Optional[PartialAddressAttributeHint] = None
    # data type: LocalityAttributeHint
    oneof_schema_5_validator: Optional[LocalityAttributeHint] = None
    # data type: WKTWKBLiteralAttributeHint
    oneof_schema_6_validator: Optional[WKTWKBLiteralAttributeHint] = None
    # data type: USCensusTract2020AttributeHint
    oneof_schema_7_validator: Optional[USCensusTract2020AttributeHint] = None
    # data type: USCBSA2020AttributeHint
    oneof_schema_8_validator: Optional[USCBSA2020AttributeHint] = None
    # data type: USState2020AttributeHint
    oneof_schema_9_validator: Optional[USState2020AttributeHint] = None
    # data type: USCounty2020AttributeHint
    oneof_schema_10_validator: Optional[USCounty2020AttributeHint] = None
    # data type: USZipCode2022AttributeHint
    oneof_schema_11_validator: Optional[USZipCode2022AttributeHint] = None
    # data type: EuropeanUnionLAU2021AttributeHint
    oneof_schema_12_validator: Optional[EuropeanUnionLAU2021AttributeHint] = None
    # data type: EuropeanUnionNUTS12021AttributeHint
    oneof_schema_13_validator: Optional[EuropeanUnionNUTS12021AttributeHint] = None
    # data type: EuropeanUnionNUTS22021AttributeHint
    oneof_schema_14_validator: Optional[EuropeanUnionNUTS22021AttributeHint] = None
    # data type: EuropeanUnionNUTS32021AttributeHint
    oneof_schema_15_validator: Optional[EuropeanUnionNUTS32021AttributeHint] = None
    # data type: AustralianABSPostalArea2021AttributeHint
    oneof_schema_16_validator: Optional[AustralianABSPostalArea2021AttributeHint] = None
    # data type: Admin0AttributeHint
    oneof_schema_17_validator: Optional[Admin0AttributeHint] = None
    # data type: Admin1AttributeHint
    oneof_schema_18_validator: Optional[Admin1AttributeHint] = None
    # data type: TimezoneAttributeHint
    oneof_schema_19_validator: Optional[TimezoneAttributeHint] = None
    # data type: H3AttributeHint
    oneof_schema_20_validator: Optional[H3AttributeHint] = None
    actual_instance: Optional[Union[Admin0AttributeHint, Admin1AttributeHint, AustralianABSPostalArea2021AttributeHint, EuropeanUnionLAU2021AttributeHint, EuropeanUnionNUTS12021AttributeHint, EuropeanUnionNUTS22021AttributeHint, EuropeanUnionNUTS32021AttributeHint, FullAddressAttributeHint, H3AttributeHint, LatitudeAndLongitudeAttributeHint, LatitudeAndLongitudeCombinedAttributeHint, LocalityAttributeHint, PartialAddressAttributeHint, TimezoneAttributeHint, USCBSA2020AttributeHint, USCensusTract2020AttributeHint, USCounty2020AttributeHint, USState2020AttributeHint, USZipCode2022AttributeHint, WKTWKBLiteralAttributeHint]] = None
    one_of_schemas: Set[str] = { "Admin0AttributeHint", "Admin1AttributeHint", "AustralianABSPostalArea2021AttributeHint", "EuropeanUnionLAU2021AttributeHint", "EuropeanUnionNUTS12021AttributeHint", "EuropeanUnionNUTS22021AttributeHint", "EuropeanUnionNUTS32021AttributeHint", "FullAddressAttributeHint", "H3AttributeHint", "LatitudeAndLongitudeAttributeHint", "LatitudeAndLongitudeCombinedAttributeHint", "LocalityAttributeHint", "PartialAddressAttributeHint", "TimezoneAttributeHint", "USCBSA2020AttributeHint", "USCensusTract2020AttributeHint", "USCounty2020AttributeHint", "USState2020AttributeHint", "USZipCode2022AttributeHint", "WKTWKBLiteralAttributeHint" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = UploadInterpretationHint.model_construct()
        error_messages = []
        match = 0
        # validate data type: LatitudeAndLongitudeAttributeHint
        if not isinstance(v, LatitudeAndLongitudeAttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LatitudeAndLongitudeAttributeHint`")
        else:
            match += 1
        # validate data type: LatitudeAndLongitudeCombinedAttributeHint
        if not isinstance(v, LatitudeAndLongitudeCombinedAttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LatitudeAndLongitudeCombinedAttributeHint`")
        else:
            match += 1
        # validate data type: FullAddressAttributeHint
        if not isinstance(v, FullAddressAttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FullAddressAttributeHint`")
        else:
            match += 1
        # validate data type: PartialAddressAttributeHint
        if not isinstance(v, PartialAddressAttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PartialAddressAttributeHint`")
        else:
            match += 1
        # validate data type: LocalityAttributeHint
        if not isinstance(v, LocalityAttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LocalityAttributeHint`")
        else:
            match += 1
        # validate data type: WKTWKBLiteralAttributeHint
        if not isinstance(v, WKTWKBLiteralAttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WKTWKBLiteralAttributeHint`")
        else:
            match += 1
        # validate data type: USCensusTract2020AttributeHint
        if not isinstance(v, USCensusTract2020AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `USCensusTract2020AttributeHint`")
        else:
            match += 1
        # validate data type: USCBSA2020AttributeHint
        if not isinstance(v, USCBSA2020AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `USCBSA2020AttributeHint`")
        else:
            match += 1
        # validate data type: USState2020AttributeHint
        if not isinstance(v, USState2020AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `USState2020AttributeHint`")
        else:
            match += 1
        # validate data type: USCounty2020AttributeHint
        if not isinstance(v, USCounty2020AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `USCounty2020AttributeHint`")
        else:
            match += 1
        # validate data type: USZipCode2022AttributeHint
        if not isinstance(v, USZipCode2022AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `USZipCode2022AttributeHint`")
        else:
            match += 1
        # validate data type: EuropeanUnionLAU2021AttributeHint
        if not isinstance(v, EuropeanUnionLAU2021AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EuropeanUnionLAU2021AttributeHint`")
        else:
            match += 1
        # validate data type: EuropeanUnionNUTS12021AttributeHint
        if not isinstance(v, EuropeanUnionNUTS12021AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EuropeanUnionNUTS12021AttributeHint`")
        else:
            match += 1
        # validate data type: EuropeanUnionNUTS22021AttributeHint
        if not isinstance(v, EuropeanUnionNUTS22021AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EuropeanUnionNUTS22021AttributeHint`")
        else:
            match += 1
        # validate data type: EuropeanUnionNUTS32021AttributeHint
        if not isinstance(v, EuropeanUnionNUTS32021AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EuropeanUnionNUTS32021AttributeHint`")
        else:
            match += 1
        # validate data type: AustralianABSPostalArea2021AttributeHint
        if not isinstance(v, AustralianABSPostalArea2021AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AustralianABSPostalArea2021AttributeHint`")
        else:
            match += 1
        # validate data type: Admin0AttributeHint
        if not isinstance(v, Admin0AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Admin0AttributeHint`")
        else:
            match += 1
        # validate data type: Admin1AttributeHint
        if not isinstance(v, Admin1AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Admin1AttributeHint`")
        else:
            match += 1
        # validate data type: TimezoneAttributeHint
        if not isinstance(v, TimezoneAttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimezoneAttributeHint`")
        else:
            match += 1
        # validate data type: H3AttributeHint
        if not isinstance(v, H3AttributeHint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `H3AttributeHint`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in UploadInterpretationHint with oneOf schemas: Admin0AttributeHint, Admin1AttributeHint, AustralianABSPostalArea2021AttributeHint, EuropeanUnionLAU2021AttributeHint, EuropeanUnionNUTS12021AttributeHint, EuropeanUnionNUTS22021AttributeHint, EuropeanUnionNUTS32021AttributeHint, FullAddressAttributeHint, H3AttributeHint, LatitudeAndLongitudeAttributeHint, LatitudeAndLongitudeCombinedAttributeHint, LocalityAttributeHint, PartialAddressAttributeHint, TimezoneAttributeHint, USCBSA2020AttributeHint, USCensusTract2020AttributeHint, USCounty2020AttributeHint, USState2020AttributeHint, USZipCode2022AttributeHint, WKTWKBLiteralAttributeHint. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in UploadInterpretationHint with oneOf schemas: Admin0AttributeHint, Admin1AttributeHint, AustralianABSPostalArea2021AttributeHint, EuropeanUnionLAU2021AttributeHint, EuropeanUnionNUTS12021AttributeHint, EuropeanUnionNUTS22021AttributeHint, EuropeanUnionNUTS32021AttributeHint, FullAddressAttributeHint, H3AttributeHint, LatitudeAndLongitudeAttributeHint, LatitudeAndLongitudeCombinedAttributeHint, LocalityAttributeHint, PartialAddressAttributeHint, TimezoneAttributeHint, USCBSA2020AttributeHint, USCensusTract2020AttributeHint, USCounty2020AttributeHint, USState2020AttributeHint, USZipCode2022AttributeHint, WKTWKBLiteralAttributeHint. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into LatitudeAndLongitudeAttributeHint
        try:
            instance.actual_instance = LatitudeAndLongitudeAttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LatitudeAndLongitudeCombinedAttributeHint
        try:
            instance.actual_instance = LatitudeAndLongitudeCombinedAttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FullAddressAttributeHint
        try:
            instance.actual_instance = FullAddressAttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PartialAddressAttributeHint
        try:
            instance.actual_instance = PartialAddressAttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LocalityAttributeHint
        try:
            instance.actual_instance = LocalityAttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WKTWKBLiteralAttributeHint
        try:
            instance.actual_instance = WKTWKBLiteralAttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into USCensusTract2020AttributeHint
        try:
            instance.actual_instance = USCensusTract2020AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into USCBSA2020AttributeHint
        try:
            instance.actual_instance = USCBSA2020AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into USState2020AttributeHint
        try:
            instance.actual_instance = USState2020AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into USCounty2020AttributeHint
        try:
            instance.actual_instance = USCounty2020AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into USZipCode2022AttributeHint
        try:
            instance.actual_instance = USZipCode2022AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EuropeanUnionLAU2021AttributeHint
        try:
            instance.actual_instance = EuropeanUnionLAU2021AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EuropeanUnionNUTS12021AttributeHint
        try:
            instance.actual_instance = EuropeanUnionNUTS12021AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EuropeanUnionNUTS22021AttributeHint
        try:
            instance.actual_instance = EuropeanUnionNUTS22021AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EuropeanUnionNUTS32021AttributeHint
        try:
            instance.actual_instance = EuropeanUnionNUTS32021AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AustralianABSPostalArea2021AttributeHint
        try:
            instance.actual_instance = AustralianABSPostalArea2021AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Admin0AttributeHint
        try:
            instance.actual_instance = Admin0AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Admin1AttributeHint
        try:
            instance.actual_instance = Admin1AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TimezoneAttributeHint
        try:
            instance.actual_instance = TimezoneAttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into H3AttributeHint
        try:
            instance.actual_instance = H3AttributeHint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UploadInterpretationHint with oneOf schemas: Admin0AttributeHint, Admin1AttributeHint, AustralianABSPostalArea2021AttributeHint, EuropeanUnionLAU2021AttributeHint, EuropeanUnionNUTS12021AttributeHint, EuropeanUnionNUTS22021AttributeHint, EuropeanUnionNUTS32021AttributeHint, FullAddressAttributeHint, H3AttributeHint, LatitudeAndLongitudeAttributeHint, LatitudeAndLongitudeCombinedAttributeHint, LocalityAttributeHint, PartialAddressAttributeHint, TimezoneAttributeHint, USCBSA2020AttributeHint, USCensusTract2020AttributeHint, USCounty2020AttributeHint, USState2020AttributeHint, USZipCode2022AttributeHint, WKTWKBLiteralAttributeHint. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UploadInterpretationHint with oneOf schemas: Admin0AttributeHint, Admin1AttributeHint, AustralianABSPostalArea2021AttributeHint, EuropeanUnionLAU2021AttributeHint, EuropeanUnionNUTS12021AttributeHint, EuropeanUnionNUTS22021AttributeHint, EuropeanUnionNUTS32021AttributeHint, FullAddressAttributeHint, H3AttributeHint, LatitudeAndLongitudeAttributeHint, LatitudeAndLongitudeCombinedAttributeHint, LocalityAttributeHint, PartialAddressAttributeHint, TimezoneAttributeHint, USCBSA2020AttributeHint, USCensusTract2020AttributeHint, USCounty2020AttributeHint, USState2020AttributeHint, USZipCode2022AttributeHint, WKTWKBLiteralAttributeHint. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Admin0AttributeHint, Admin1AttributeHint, AustralianABSPostalArea2021AttributeHint, EuropeanUnionLAU2021AttributeHint, EuropeanUnionNUTS12021AttributeHint, EuropeanUnionNUTS22021AttributeHint, EuropeanUnionNUTS32021AttributeHint, FullAddressAttributeHint, H3AttributeHint, LatitudeAndLongitudeAttributeHint, LatitudeAndLongitudeCombinedAttributeHint, LocalityAttributeHint, PartialAddressAttributeHint, TimezoneAttributeHint, USCBSA2020AttributeHint, USCensusTract2020AttributeHint, USCounty2020AttributeHint, USState2020AttributeHint, USZipCode2022AttributeHint, WKTWKBLiteralAttributeHint]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


